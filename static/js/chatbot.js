let chatbotSteps = [];
let chatbotState = 0;
let chatbotForm = {};

// –†–µ–Ω–¥–µ—Ä –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
function renderChatbotStep(stepIdx) {
  const step = chatbotSteps[stepIdx];
  const messages = document.getElementById('chatbot-messages');
  const buttons = document.getElementById('chatbot-buttons');
  if (!step) return;


  // 1. –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  if (step.calendar) {
    console.log('–ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è!', stepIdx, step);
    messages.innerHTML = `<div style="margin-bottom:8px;">${step.text}</div>`;
    buttons.innerHTML = '';
    const input = document.createElement('input');
    input.type = 'datetime-local';
    input.autocomplete = 'off';
    input.style = "width: 90%; margin-top:8px; padding:6px; border-radius:4px; border:1px solid #ccc;";

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –∏ –≤—Ä–µ–º—è —Å 10:00 –¥–æ 16:00
    // min/max –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
    const now = new Date();
    // min: —Å–µ–≥–æ–¥–Ω—è, 10:00
    let minDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 10, 0, 0, 0);
    // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ—Å–ª–µ 16:00, minDate = –∑–∞–≤—Ç—Ä–∞ 10:00
    if (now.getHours() >= 16) {
      minDate.setDate(minDate.getDate() + 1);
    }
    // max: —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π, 16:00
    let maxDate = new Date(minDate);
    maxDate.setDate(maxDate.getDate() + 30);
    maxDate.setHours(16, 0, 0, 0);

    function toDatetimeLocal(dt) {
      // YYYY-MM-DDTHH:MM
      return dt.toISOString().slice(0,16);
    }
    input.min = toDatetimeLocal(minDate);
    input.max = toDatetimeLocal(maxDate);

    // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
    input.addEventListener('change', function() {
      if (!input.value) return;
      const dt = new Date(input.value);
      const day = dt.getDay(); // 0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 6 - —Å—É–±–±–æ—Ç–∞
      const hour = dt.getHours();
      if (day === 0 || day === 6) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (–ü–Ω-–ü—Ç).');
        input.value = '';
        return;
      }
      if (hour < 10 || hour >= 16) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å 10:00 –¥–æ 16:00.');
        input.value = '';
        return;
      }
    });

    buttons.appendChild(input);
    const sendBtn = document.createElement('button');
    sendBtn.textContent = '–î–∞–ª–µ–µ';
    sendBtn.style = "margin: 8px 0 0 0; display:block;";
    sendBtn.onclick = () => {
      if (!input.value) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.');
        return;
      }
      // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
      const dt = new Date(input.value);
      const day = dt.getDay();
      const hour = dt.getHours();
      if (day === 0 || day === 6) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (–ü–Ω-–ü—Ç).');
        return;
      }
      if (hour < 10 || hour >= 16) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å 10:00 –¥–æ 16:00.');
        return;
      }
      chatbotForm['datetime'] = input.value;
      renderChatbotStep(stepIdx + 1);
      chatbotState = stepIdx + 1;
    };
    buttons.appendChild(sendBtn);
    return;
  }

  // 2. –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (–∏–º—è, email, —Ç–µ–ª–µ—Ñ–æ–Ω)
  if (step.input) {
    messages.innerHTML += `<div style="margin-bottom:8px;">${step.text}</div>`;
    buttons.innerHTML = '';
    const input = document.createElement('input');
    if (step.input === 'email') {
      input.type = 'email';
      input.placeholder = '–í–∞—à e-mail';
      input.autocomplete = 'email';
    } else if (step.input === 'name') {
      input.type = 'text';
      input.placeholder = '–í–∞—à–µ –∏–º—è';
      input.autocomplete = 'name';
    } else if (step.input === 'phone') {
      input.type = 'tel';
      input.placeholder = '+7 (___) ___-__-__';
      input.autocomplete = 'tel';
    } else {
      input.type = 'text';
      input.placeholder = '';
      input.autocomplete = 'off';
    }
    buttons.appendChild(input);
    const sendBtn = document.createElement('button');
    sendBtn.textContent = '–î–∞–ª–µ–µ';
    sendBtn.style = "margin: 8px 0 0 0; display:block;";
    sendBtn.onclick = () => {
      const value = input.value.trim();
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –ø–æ–ª—è
      if (!value) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ.');
        return;
      }
      if (step.input === 'email') {
        // –ü—Ä–æ—Å—Ç–∞—è email-–≤–∞–ª–∏–¥–∞—Ü–∏—è
        const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailPattern.test(value)) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail.');
          return;
        }
      }
      if (step.input === 'phone') {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞: +7 –∏ 10 —Ü–∏—Ñ—Ä
        const digits = value.replace(/\D/g, '');
        if (!(value.startsWith('+7') && digits.length === 11)) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX.');
          return;
        }
      }
      if (step.input === 'name') {
        // –ò–º—è –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã
        if (value.length < 2 || !/^[–ê-–Ø–∞-—èA-Za-z\s\-]+$/.test(value)) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.');
          return;
        }
      }
      chatbotForm[step.input] = value;

      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ —Ñ–æ—Ä–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–ª–µ—Ñ–æ–Ω), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ Netlify Function
      if (step.input === 'phone') {
        fetch('/api/booking', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(chatbotForm)
        });
        renderChatbotStep(stepIdx + 1);
        chatbotState = stepIdx + 1;
        chatbotForm = {};
      } else {
        renderChatbotStep(stepIdx + 1);
        chatbotState = stepIdx + 1;
      }
    };
    buttons.appendChild(sendBtn);
    return;
  }

  // 3. –ö–∞—Ä—Ç–∏–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, QR-–∫–æ–¥)
  if (step.image) {
    messages.innerHTML += `<div style="margin-bottom:8px;">${step.text}</div>
      <img src="${step.image}" alt="QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã" style="max-width:100%;margin:12px 0;border-radius:8px;box-shadow:0 2px 8px #000a;">`;
  }

  // 4. –ö–Ω–æ–ø–∫–∏
  if (step.buttons && step.buttons.length > 0) {
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏), –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
    if (!step.image) {
      messages.innerHTML += `<div style="margin-bottom:8px;">${step.text}</div>`;
    }
    buttons.innerHTML = '';
    step.buttons.forEach(btn => {
      if (btn.url) {
        // –°—Å—ã–ª–∫–∞-–∫–Ω–æ–ø–∫–∞ (—Ç–µ–ª–µ—Ñ–æ–Ω, WhatsApp, Telegram, –æ–ø–ª–∞—Ç–∞)
        const a = document.createElement('a');
        a.textContent = btn.label;
        a.href = btn.url;
        if (btn.url.startsWith('http')) {
          a.target = '_blank';
          a.rel = 'noopener noreferrer';
        }
        a.style = "margin: 4px 4px 0 0; background:#1e90ff; color:#fff; border:none; border-radius:4px; padding:6px 12px; cursor:pointer; display:inline-block; text-align:center; text-decoration:none;";
        buttons.appendChild(a);
      } else {
        // –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (–ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é)
        const b = document.createElement('button');
        b.textContent = btn.label;
        b.onclick = () => {
          if (btn.next === null) {
            // –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç
            document.getElementById('chatbot-window').style.display = 'none';
            messages.innerHTML = '';
            chatbotState = 0;
            chatbotForm = {};
          } else if (
            chatbotSteps[btn.next] &&
            !chatbotSteps[btn.next].calendar &&
            !chatbotSteps[btn.next].input &&
            (!chatbotSteps[btn.next].buttons || chatbotSteps[btn.next].buttons.length === 0)
          ) {
            // –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ" (–≤–µ–¥—ë—Ç –Ω–∞ –ø—Ä–æ—â–∞–ª—å–Ω—ã–π —à–∞–≥), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—â–∞–Ω–∏–µ –Ω–∞ —á–∏—Å—Ç–æ–º —ç–∫—Ä–∞–Ω–µ
            messages.innerHTML = `<div style="margin-bottom:8px;">${chatbotSteps[btn.next].text}</div>`;
            document.getElementById('chatbot-buttons').innerHTML = '';
            setTimeout(() => {
              document.getElementById('chatbot-window').style.display = 'none';
              messages.innerHTML = '';
              chatbotState = 0;
              chatbotForm = {};
            }, 2000);
          } else {
            renderChatbotStep(btn.next);
            chatbotState = btn.next;
          }
        };
        buttons.appendChild(b);
      }
    });
    return;
  }

  // 4. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚Äî –ø—Ä–æ—â–∞–ª—å–Ω—ã–π —à–∞–≥
  messages.innerHTML = `<div style="margin-bottom:8px;">${step.text}</div>`;
  buttons.innerHTML = '';
  setTimeout(() => {
    document.getElementById('chatbot-window').style.display = 'none';
    messages.innerHTML = '';
    chatbotState = 0;
    chatbotForm = {};
  }, 10000);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è
window.addEventListener('DOMContentLoaded', function() {
  fetch('/chatbot_scenario')
    .then(response => response.json())
    .then(data => {
      chatbotSteps = data;
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí¨"
      const toggle = document.getElementById('chatbot-toggle');
      if (!toggle) return;
      toggle.onclick = function() {
        const win = document.getElementById('chatbot-window');
        if (win.style.display === 'none' || win.style.display === '') {
          win.style.display = 'block';
          document.getElementById('chatbot-messages').innerHTML = '';
          document.getElementById('chatbot-buttons').innerHTML = '';
          renderChatbotStep(0);
          chatbotState = 0;
          chatbotForm = {};
        } else {
          win.style.display = 'none';
          document.getElementById('chatbot-messages').innerHTML = '';
          document.getElementById('chatbot-buttons').innerHTML = '';
          chatbotState = 0;
          chatbotForm = {};
        }
      };
    });
});
